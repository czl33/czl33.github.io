<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Czl</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-30T08:37:50.189Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>安卓使用Dlna</title>
    <link href="http://yoursite.com/2020/06/30/%E5%AE%89%E5%8D%93%E4%BD%BF%E7%94%A8Dlna/"/>
    <id>http://yoursite.com/2020/06/30/%E5%AE%89%E5%8D%93%E4%BD%BF%E7%94%A8Dlna/</id>
    <published>2020-06-30T08:38:09.847Z</published>
    <updated>2020-06-30T08:37:50.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DLAN协议"><a href="#DLAN协议" class="headerlink" title="DLAN协议"></a>DLAN协议</h1><p>首先在说dlan协议之前，大家可以先去看2样东西,这对接下来实现与编码会有更深的理解：</p><blockquote><p>1.<a href="https://www.jianshu.com/p/19934892a235" target="_blank" rel="noopener">https://www.jianshu.com/p/19934892a235</a><br>2.</p></blockquote><h2 id="1-DMS"><a href="#1-DMS" class="headerlink" title="1.DMS"></a>1.DMS</h2><hr><h4 id="首先得明确我们这次实现的是DMS（Digital-Media-Server）是数字媒体服务器，也有遥控器的意思，也是最常见得控制端。"><a href="#首先得明确我们这次实现的是DMS（Digital-Media-Server）是数字媒体服务器，也有遥控器的意思，也是最常见得控制端。" class="headerlink" title="首先得明确我们这次实现的是DMS（Digital Media Server）是数字媒体服务器，也有遥控器的意思，也是最常见得控制端。"></a>首先得明确我们这次实现的是DMS（Digital Media Server）是数字媒体服务器，也有遥控器的意思，也是最常见得控制端。</h4><h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h2><hr><p>这边我通俗的说下DMS的原理，虽说是投屏，但最常见得使用还是投射资源链接到DMR上，让DMR自行去下载，那这会涉及到2个问题：</p><blockquote><p>1.远程资源</p></blockquote><blockquote><p>2.本地资源</p></blockquote><p>远程资源能理解是投射链接到DMR上，那本地资源呢？<br>常见做法使用一个本地服务器将本地资源通过本地服务器放出链接给DMR，让DMR像访问远程链接一样访问本地资源。</p><h2 id="3-方法"><a href="#3-方法" class="headerlink" title="3.方法"></a>3.方法</h2><hr><p>实现的话会使用到2个库：</p><blockquote><ol><li>nano服务器 ：开放服务器资源库</li><li>cling框架 : upnp框架，用作控制以及设备的查找</li></ol></blockquote><p>nano用作</p><h2 id="4-编码"><a href="#4-编码" class="headerlink" title="4.编码"></a>4.编码</h2><hr><h4 id="1-nano的使用"><a href="#1-nano的使用" class="headerlink" title="1.nano的使用"></a>1.nano的使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"> &#x2F;*</span><br><span class="line">    主构造函数，也用来启动http服务</span><br><span class="line">    *&#x2F;</span><br><span class="line">    public MyWebServer(Context context) throws IOException &#123;</span><br><span class="line">        super(PORT);</span><br><span class="line">        _mainContext &#x3D; context;</span><br><span class="line">        start();</span><br><span class="line">        ConnectivityManager conMann &#x3D; (ConnectivityManager)</span><br><span class="line">                context.getSystemService(Context.CONNECTIVITY_SERVICE);</span><br><span class="line">        NetworkInfo wifiNetworkInfo &#x3D; conMann.getNetworkInfo(ConnectivityManager.TYPE_WIFI);</span><br><span class="line">        String ip &#x3D; &quot;&quot;;</span><br><span class="line">        if (wifiNetworkInfo.isConnected()) &#123;</span><br><span class="line">            WifiManager wifiManager &#x3D; (WifiManager) context.getSystemService(Context.WIFI_SERVICE);</span><br><span class="line">            WifiInfo wifiInfo &#x3D; wifiManager.getConnectionInfo();</span><br><span class="line">            int ipAddress &#x3D; wifiInfo.getIpAddress();</span><br><span class="line">            ip &#x3D; NetUtil.intToIp(ipAddress);</span><br><span class="line">            System.out.println(&quot;wifi_ip地址为------&quot; + ip);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;\nRunning! Point your browsers to [&quot; + ip + &quot;:&quot; + PORT + &quot;&#x2F;](http:&#x2F;&#x2F;&quot; + ip + &quot;:&quot; + PORT + &quot;&#x2F;)\n&quot;);</span><br><span class="line">        Log.i(&quot;SeverURL&quot;, &quot;\nRunning! Point your browsers to [&quot; + ip + &quot;:&quot; + PORT + &quot;&#x2F;](http:&#x2F;&#x2F;&quot; + ip + &quot;:&quot; + PORT + &quot;&#x2F;)\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;重写serve方法，并转交给自己的文件响应处理</span><br><span class="line">    @Override</span><br><span class="line">    public Response serve(IHTTPSession session) &#123;  </span><br><span class="line">        return responseFile(session);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;文件响应 需要自行进行文件路径的获取，10.0以上的系统需要去清单声明android:requestLegacyExternalStorage&#x3D;&quot;true&quot;</span><br><span class="line">    public Response responseFile(IHTTPSession session)&#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        &#x2F;&#x2F;uri：用于标示文件资源的字符串，这里即是文件路径</span><br><span class="line">        String uri &#x3D; session.getUri();</span><br><span class="line">        &#x2F;&#x2F;文件输入流</span><br><span class="line">        FileInputStream fis &#x3D; new FileInputStream(uri);</span><br><span class="line">        Response response &#x3D; newFixedLengthResponse(Response.Status.OK, &quot;application&#x2F;octet-stream&quot;, fis, fis.available());</span><br><span class="line">        response.addHeader(&quot;Content-Disposition&quot;,&quot;attachment;&quot;);</span><br><span class="line">        return response;</span><br><span class="line"></span><br><span class="line">    &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    return response404(session,null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NetUtil.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;获取IP地址</span><br><span class="line">public static String getLocalIpStr(Context context)&#123;</span><br><span class="line">    WifiManager wifiManager&#x3D;(WifiManager)context.getSystemService(Context.WIFI_SERVICE);</span><br><span class="line">    WifiInfo wifiInfo&#x3D;wifiManager.getConnectionInfo();</span><br><span class="line">    return  intToIp(wifiInfo.getIpAddress());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;将int转为IP地址</span><br><span class="line">public static String intToIp(int ipInt) &#123;</span><br><span class="line">    StringBuilder sb &#x3D; new StringBuilder();</span><br><span class="line">    sb.append(ipInt &amp; 0xFF).append(&quot;.&quot;);</span><br><span class="line">    sb.append((ipInt &gt;&gt; 8) &amp; 0xFF).append(&quot;.&quot;);</span><br><span class="line">    sb.append((ipInt &gt;&gt; 16) &amp; 0xFF).append(&quot;.&quot;);</span><br><span class="line">    sb.append((ipInt &gt;&gt; 24) &amp; 0xFF);</span><br><span class="line">    return sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-Cling的使用"><a href="#2-Cling的使用" class="headerlink" title="2.Cling的使用"></a>2.Cling的使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">cling的使用</span><br><span class="line">&#x2F;&#x2F;绑定服务</span><br><span class="line"> bindUpnpServices();</span><br><span class="line"> </span><br><span class="line">  private void bindUpnpServices() &#123;</span><br><span class="line">        managerDLNA &#x3D; new ManagerDLNA(this,new BrowseRegistryListener());</span><br><span class="line">        managerDLNA.initConnection();</span><br><span class="line">        &#x2F;&#x2F; Bind UPnP service</span><br><span class="line">        boolean type &#x3D; getApplicationContext().bindService(new Intent(this, AndroidUpnpServiceImpl.class),</span><br><span class="line">                managerDLNA.getServiceConnection(), Context.BIND_AUTO_CREATE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#x2F;&#x2F;设置连接监听</span><br><span class="line"></span><br><span class="line">        mDeviceList.setOnItemClickListener(new AdapterView.OnItemClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) &#123;</span><br><span class="line">                &#x2F;&#x2F; 选择连接设备</span><br><span class="line">                Device item &#x3D; mDevicesAdapter.getItem(position);</span><br><span class="line">                if (Utils.isNull(item)) &#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Device device &#x3D; item;</span><br><span class="line">                if (Utils.isNull(device)) &#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                mDevice &#x3D; device;</span><br><span class="line">                String selectedDeviceName &#x3D; String.format(getString(R.string.selectedText), device.getDetails().getFriendlyName());</span><br><span class="line">                mTVSelected.setText(selectedDeviceName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#x2F;&#x2F;查找设备的监听</span><br><span class="line">      public class BrowseRegistryListener extends DefaultRegistryListener &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void deviceAdded(Registry registry, final Device device) &#123;</span><br><span class="line">            super.deviceAdded(registry, device);</span><br><span class="line">            runOnUiThread(new Runnable() &#123;</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    mDevicesAdapter.add(device);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void deviceRemoved(Registry registry, final Device device) &#123;</span><br><span class="line">            super.deviceRemoved(registry, device);</span><br><span class="line">            runOnUiThread(new Runnable() &#123;</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    mDevicesAdapter.remove(device);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;      </span><br><span class="line">&#x2F;&#x2F;音乐的投放</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;对设备进行音乐的暂停以及播放操作</span><br><span class="line"></span><br><span class="line">mControlPoint.execute(new Pause(avtService) &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void success(ActionInvocation invocation) &#123;</span><br><span class="line">            super.success(invocation);</span><br><span class="line">            curState &#x3D; PAUSE;</span><br><span class="line">            runOnUiThread(new Runnable() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    Toast.makeText(BrowserActivity.this, &quot;暂停成功&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void failure(ActionInvocation invocation, UpnpResponse operation, String defaultMsg) &#123;</span><br><span class="line">            curState &#x3D; ERROR;</span><br><span class="line">            Log.i(&quot;我是暂停键&quot;,&quot;失败&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;DLAN协议&quot;&gt;&lt;a href=&quot;#DLAN协议&quot; class=&quot;headerlink&quot; title=&quot;DLAN协议&quot;&gt;&lt;/a&gt;DLAN协议&lt;/h1&gt;&lt;p&gt;首先在说dlan协议之前，大家可以先去看2样东西,这对接下来实现与编码会有更深的理解：&lt;/p&gt;
&lt;block
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
